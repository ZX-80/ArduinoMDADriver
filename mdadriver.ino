// ARDUINO CGA Screendriver (monochrome) - resolution 100 x 70

#define HSYNC 8
#define VSYNC 16
#define ROWS 87

const byte buf[88][13] = {
  {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
  {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
  {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
  {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0 }, 
  { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 240 }, 
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16 }, 
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16 }, 
  { 128,   7, 224,   0,   2,  31, 159,  24, 199, 152, 199,   0,  16 }, 
  { 128,  24,  16,   0,   7,  12, 205, 152, 195,  28, 205, 128,  16 }, 
  { 128,  32, 232,   0,  13, 140, 204, 216, 195,  30, 216, 192,  16 }, 
  { 128,  65,  20,   0,  24, 204, 204, 216, 195,  31, 216, 192,  16 }, 
  { 128, 130,  20,   0,  24, 207, 140, 216, 195,  27, 216, 192,  16 }, 
  { 129,   2,  14,   0,  24, 205, 140, 216, 195,  25, 216, 192,  16 }, 
  { 129,   3, 241, 128,  31, 204, 204, 216, 195,  24, 216, 192,  16 }, 
  { 130,  12,   0,  64,  24, 204, 204, 216, 195,  24, 216, 192,  16 }, 
  { 132,  16,   7, 192,  24, 204, 205, 152, 195,  24, 205, 128,  16 }, 
  { 132,  33, 255, 128,  24, 220, 223,  15, 135, 152, 199,   0,  16 }, 
  { 140,  78,   2,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16 }, 
  { 144, 145,  10,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16 }, 
  { 160, 225,  31,   0,  31, 135,  24, 223, 223, 159, 223,   0,  16 }, 
  { 167,  33,  32, 128,  12, 205, 152, 204, 204, 204, 205, 128,  16 }, 
  { 152, 144,   0,  64,  12, 216, 216, 204,  76, 204,  76, 192,  16 }, 
  { 144, 144,   0,  64,  12, 216, 216, 205,  12, 205,  12, 192,  16 }, 
  { 144, 115, 224, 128,  15, 152, 218, 207,  15, 143,  12, 192,  16 }, 
  { 144,   2,  17,   0,  12,  24, 218, 205,  13, 141,  12, 192,  16 }, 
  { 136,   2,  14,   0,  12,  24, 223, 204,  76, 204,  76, 192,  16 }, 
  { 135, 129,   4,   0,  12,  13, 143, 140, 204, 204, 205, 128,  16 }, 
  { 128, 120, 248,   0,  30,   7,  13, 159, 220, 223, 223,   0,  16 }, 
  { 128, 111,  96,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16 }, 
  { 128, 148, 160,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16 }, 
  { 129,  10,  80,   0,   0,   3, 255, 255, 255, 255,   0,   0,  16 }, 
  { 129,   9,  40,   0,   0,   3, 224, 248,  62,  15,   0,   0,  16 }, 
  { 131, 201, 196,   0,   0,   3, 206, 115, 158, 231,   0,   0,  16 }, 
  { 130,  50,  66,   0,   0,   3, 159,  39, 204, 243,   0,   0,  16 }, 
  { 132,  18,  66,   0,   0,   3,  51, 140, 237, 251,   0,   0,  16 }, 
  { 136,   9, 133,   0,   0,   3,  97,  24,   9,  27,   0,   0,  16 }, 
  { 138, 136,   5,   0,   0,   3,  96,  25, 235,  27,   0,   0,  16 }, 
  { 138, 184,   7,   0,   0,   3,  97,  24,  99,  27,   0,   0,  16 }, 
  { 136,  16,   5,   0,   0,   3, 115, 156, 231, 251,   0,   0,  16 }, 
  { 132,  16,  10,   0,   0,   3,  63,  15, 199,  59,   0,   0,  16 }, 
  { 131, 252,  16,   0,   0,   3,  30,   7, 135,  59,   0,   0,  16 }, 
  { 129,   3, 248,   0,   0,   3, 128,  96,  16,   3,   0,   0,  16 }, 
  { 129, 243,   4,   0,   0,   3, 192, 240,  48,   3,   0,   0,  16 }, 
  { 130,   0, 132,   0,   0,   3, 255, 255, 255, 255,   0,   0,  16 }, 
  { 130,   0, 132,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16 }, 
  { 130,   0, 132,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16 }, 
  { 130,   0, 136,   0,   0,   0,  15, 204,   3, 243,   0,   0,  16 }, 
  { 131,   1, 240,   0,   0,   0,  56,  48,  14,  12,   0,   0,  16 }, 
  { 129, 254,   0,   0,   0,   0, 247, 236,  61, 251,   0,   0,  16 }, 
  { 128,   0,   0,   0,   0,   1, 223, 252, 119, 255,   0,   0,  16 }, 
  { 128,   0,   0,   0,   0,   1, 159, 252, 103, 255,   0,   0,  16 }, 
  { 128,   0,   0,   0,   0,   2, 159, 252, 167, 255,   0,   0,  16 }, 
  { 128,   0,   0,   0,   0,   2,  62, 124, 143, 159,   0,   0,  16 }, 
  { 128,   0,   0,   0,   0,   3, 242,  60, 252, 143,   0,   0,  16 }, 
  { 128,   0,   0,   0,   0,   3, 224,  60, 248,  15,   0,   0,  16 }, 
  { 128,   0,   0,   0,   0,   1, 224, 124, 120,  31,   0,   0,  16 }, 
  { 128,   0,   0,   0,   0,   1, 241, 252, 124, 127,   0,   0,  16 }, 
  { 128,   0,   0,   0,   0,   0, 255, 252,  63, 255,   0,   0,  16 }, 
  { 128,   0,   0,   0,   0,   0,  63, 252,  15, 255,   0,   0,  16 }, 
  { 128,   0,   0,   0,   0,   0,  15, 204,   3, 243,   0,   0,  16 }, 
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16 }, 
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16 }, 
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16 }, 
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16 }, 
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16 }, 
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16 }, 
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16 }, 
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16 }, 
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16 }, 
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16 }, 
  { 128,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16 }, 
  { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 240 }, 
  {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0 }, 
  {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
  {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
  {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
  {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
  {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
  {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
  {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
  {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
  {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
  {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
  {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
  {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
  {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
  {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0},
  {   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0}
};



#define SETC(x) PORTB = (PORTB & ~7) | x

#define EXEC_NOP asm volatile ("nop\n\t")
#define EXEC_10_NOPS EXEC_NOP; EXEC_NOP; EXEC_NOP; EXEC_NOP; EXEC_NOP; EXEC_NOP; EXEC_NOP; EXEC_NOP; EXEC_NOP; EXEC_NOP;
#define EXEC_50_NOPS EXEC_10_NOPS; EXEC_10_NOPS; EXEC_10_NOPS; EXEC_10_NOPS; EXEC_10_NOPS;
#define EXEC_100_NOPS EXEC_50_NOPS; EXEC_50_NOPS;

#define EXEC_LEFT_BLANKING_AND_OVERSCAN() { EXEC_50_NOPS; SETC(0); EXEC_10_NOPS; EXEC_NOP; EXEC_NOP; EXEC_NOP; }
#define EXEC_RIGHT_OVERSCAN_AND_BLANKING() { SETC(0); EXEC_50_NOPS; EXEC_50_NOPS; EXEC_10_NOPS; EXEC_NOP; EXEC_NOP; EXEC_NOP; EXEC_NOP; EXEC_NOP; EXEC_NOP; }
#define EXEC_HSYNC() { PORTB |= HSYNC; EXEC_50_NOPS; EXEC_10_NOPS; EXEC_10_NOPS; EXEC_NOP; PORTB &= ~HSYNC; }

void DRAW_PIXELS_FOR_LINE(int i) { 
  SETC((buf[i][0] >> 7) & 1);          
  SETC((buf[i][0] >> 6) & 1);          
  SETC((buf[i][0] >> 5) & 1);           
  SETC((buf[i][0] >> 4) & 1);          
  SETC((buf[i][0] >> 3) & 1);          
  SETC((buf[i][0] >> 2) & 1);          
  SETC((buf[i][0] >> 1) & 1);           
  SETC((buf[i][0] >> 0) & 1);          
  SETC((buf[i][1] >> 7) & 1);          
  SETC((buf[i][1] >> 6) & 1);          
  SETC((buf[i][1] >> 5) & 1);           
  SETC((buf[i][1] >> 4) & 1);          
  SETC((buf[i][1] >> 3) & 1);          
  SETC((buf[i][1] >> 2) & 1);          
  SETC((buf[i][1] >> 1) & 1);           
  SETC((buf[i][1] >> 0) & 1);          
  SETC((buf[i][2] >> 7) & 1);          
  SETC((buf[i][2] >> 6) & 1);          
  SETC((buf[i][2] >> 5) & 1);           
  SETC((buf[i][2] >> 4) & 1);          
  SETC((buf[i][2] >> 3) & 1);          
  SETC((buf[i][2] >> 2) & 1);          
  SETC((buf[i][2] >> 1) & 1);           
  SETC((buf[i][2] >> 0) & 1);          
  SETC((buf[i][3] >> 7) & 1);          
  SETC((buf[i][3] >> 6) & 1);          
  SETC((buf[i][3] >> 5) & 1);           
  SETC((buf[i][3] >> 4) & 1);          
  SETC((buf[i][3] >> 3) & 1);          
  SETC((buf[i][3] >> 2) & 1);          
  SETC((buf[i][3] >> 1) & 1);           
  SETC((buf[i][3] >> 0) & 1);          

  // 32

  SETC((buf[i][4] >> 7) & 1);          
  SETC((buf[i][4] >> 6) & 1);          
  SETC((buf[i][4] >> 5) & 1);           
  SETC((buf[i][4] >> 4) & 1);          
  SETC((buf[i][4] >> 3) & 1);          
  SETC((buf[i][4] >> 2) & 1);          
  SETC((buf[i][4] >> 1) & 1);           
  SETC((buf[i][4] >> 0) & 1);          
  SETC((buf[i][5] >> 7) & 1);          
  SETC((buf[i][5] >> 6) & 1);          
  SETC((buf[i][5] >> 5) & 1);           
  SETC((buf[i][5] >> 4) & 1);          
  SETC((buf[i][5] >> 3) & 1);          
  SETC((buf[i][5] >> 2) & 1);          
  SETC((buf[i][5] >> 1) & 1);           
  SETC((buf[i][5] >> 0) & 1);          
  SETC((buf[i][6] >> 7) & 1);          
  SETC((buf[i][6] >> 6) & 1);          
  SETC((buf[i][6] >> 5) & 1);           
  SETC((buf[i][6] >> 4) & 1);          
  SETC((buf[i][6] >> 3) & 1);          
  SETC((buf[i][6] >> 2) & 1);          
  SETC((buf[i][6] >> 1) & 1);           
  SETC((buf[i][6] >> 0) & 1);          
  SETC((buf[i][7] >> 7) & 1);          
  SETC((buf[i][7] >> 6) & 1);          
  SETC((buf[i][7] >> 5) & 1);           
  SETC((buf[i][7] >> 4) & 1);          
  SETC((buf[i][7] >> 3) & 1);          
  SETC((buf[i][7] >> 2) & 1);          
  SETC((buf[i][7] >> 1) & 1);           
  SETC((buf[i][7] >> 0) & 1);          

  // 64

  SETC((buf[i][8] >> 7) & 1);          
  SETC((buf[i][8] >> 6) & 1);          
  SETC((buf[i][8] >> 5) & 1);           
  SETC((buf[i][8] >> 4) & 1);          
  SETC((buf[i][8] >> 3) & 1);          
  SETC((buf[i][8] >> 2) & 1);          
  SETC((buf[i][8] >> 1) & 1);           
  SETC((buf[i][8] >> 0) & 1);          
  SETC((buf[i][9] >> 7) & 1);          
  SETC((buf[i][9] >> 6) & 1);          
  SETC((buf[i][9] >> 5) & 1);           
  SETC((buf[i][9] >> 4) & 1);          
  SETC((buf[i][9] >> 3) & 1);          
  SETC((buf[i][9] >> 2) & 1);          
  SETC((buf[i][9] >> 1) & 1);           
  SETC((buf[i][9] >> 0) & 1);          
  SETC((buf[i][10] >> 7) & 1);          
  SETC((buf[i][10] >> 6) & 1);          
  SETC((buf[i][10] >> 5) & 1);           
  SETC((buf[i][10] >> 4) & 1);          
  SETC((buf[i][10] >> 3) & 1);          
  SETC((buf[i][10] >> 2) & 1);          
  SETC((buf[i][10] >> 1) & 1);           
  SETC((buf[i][10] >> 0) & 1);          
  
  SETC((buf[i][11] >> 7) & 1);          
  SETC((buf[i][11] >> 6) & 1);          
  SETC((buf[i][11] >> 5) & 1);           
  SETC((buf[i][11] >> 4) & 1);          
  SETC((buf[i][11] >> 3) & 1);          
  SETC((buf[i][11] >> 2) & 1);          
  SETC((buf[i][11] >> 1) & 1);           
  SETC((buf[i][11] >> 0) & 1);          
  
  // 96

  SETC((buf[i][12] >> 7) & 1);          
  SETC((buf[i][12] >> 6) & 1);          
  SETC((buf[i][12] >> 5) & 1);           
  SETC((buf[i][12] >> 4) & 1);          

  // 100
}

#define DRAW_LINE(i) { \
  EXEC_LEFT_BLANKING_AND_OVERSCAN(); \
  DRAW_PIXELS_FOR_LINE(i); \
  EXEC_RIGHT_OVERSCAN_AND_BLANKING(); \
  EXEC_HSYNC(); \
}

int row = ROWS;

void setup() {
    DDRB = B111111;
    PORTB &= ~(HSYNC | VSYNC | 7);
    noInterrupts();
}

void loop() {
  DRAW_LINE(row); EXEC_10_NOPS; EXEC_10_NOPS; EXEC_NOP; EXEC_NOP; EXEC_NOP; EXEC_NOP; EXEC_NOP; EXEC_NOP; EXEC_NOP;
  DRAW_LINE(row); EXEC_10_NOPS; EXEC_10_NOPS; EXEC_NOP; EXEC_NOP; EXEC_NOP; EXEC_NOP; EXEC_NOP; EXEC_NOP; EXEC_NOP;
  DRAW_LINE(row);

  switch (row++) {
      case 75:
          PORTB |= VSYNC; // VSYNC HIGH
          break;
      case 76:
          PORTB &= ~VSYNC; // VSYNC LOW
          break;
      case ROWS:
          row = 0;
          break;
  }
}
